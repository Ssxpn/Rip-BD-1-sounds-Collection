import random
import os
import wave
import simpleaudio as sa

# üìÅ Dossier principal des sons
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SOUND_PATH = os.path.join(BASE_DIR, "sounds", "compressed")

# üéµ Dossiers pour chaque type de son
SOUND_DIRECTORIES = {
    "affirmation": os.path.join(SOUND_PATH, "01_Happy_Thrilled"),
    "negation": os.path.join(SOUND_PATH, "04_Sadness_Deception"),
    "question": os.path.join(SOUND_PATH, "03_Surprise_Questionning"),
    "surprise": os.path.join(SOUND_PATH, "03_Surprise_Questionning"),
    "neutral": os.path.join(SOUND_PATH, "10_Neutral"),
}

# üîÑ Charger tous les fichiers WAV une seule fois au d√©marrage
SOUND_FILES = {category: [] for category in SOUND_DIRECTORIES}

for category, folder in SOUND_DIRECTORIES.items():
    if os.path.exists(folder):
        SOUND_FILES[category] = [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith(".wav")]

def get_random_sound(category):
    """Retourne un fichier audio al√©atoire pour la cat√©gorie donn√©e, ou un son neutre."""
    files = SOUND_FILES.get(category, [])
    return random.choice(files) if files else random.choice(SOUND_FILES["neutral"])

def load_wav_file(sound_file):
    """Charge un fichier WAV en m√©moire et retourne les donn√©es audio."""
    with wave.open(sound_file, "rb") as wav_file:
        return (
            wav_file.readframes(wav_file.getnframes()), 
            wav_file.getnchannels(), 
            wav_file.getsampwidth(), 
            wav_file.getframerate()
        )

# üî¥ Liste pour stocker les objets `play_obj` et √©viter qu'ils ne soient supprim√©s trop t√¥t
active_sounds = []

def play_bd1_sound(audio_data, num_channels, bytes_per_sample, sample_rate):
    """Joue un fichier WAV pr√©charg√© sans latence et emp√™che la suppression pr√©matur√©e."""
    play_obj = sa.play_buffer(audio_data, num_channels, bytes_per_sample, sample_rate)
    active_sounds.append(play_obj)  # Stocke l'objet pour emp√™cher sa suppression imm√©diate
    print("‚úÖ Lecture en cours...")

def get_sound_category(text):
    """D√©tecte la cat√©gorie du son en fonction du texte re√ßu."""
    SOUND_MAP = {
        "oui": "affirmation",
        "non": "negation",
        "?": "question",
        "merci": "affirmation",
        "quoi": "question",
        "super": "affirmation",
    }

    for word, category in SOUND_MAP.items():
        if word in text.lower():
            return category

    return "neutral"

# üî• Test avec une phrase
user_input = "Oui, c'est parfait !"
category = get_sound_category(user_input)
sound_file = get_random_sound(category)

if sound_file:
    sound_data = load_wav_file(sound_file)
    play_bd1_sound(*sound_data)
else:
    print("‚ùå Aucun son disponible pour cette cat√©gorie.")

# üî¥ Attente passive pour √©viter que le programme ne se ferme trop vite
input("Appuyez sur Entr√©e pour quitter apr√®s lecture du son...")